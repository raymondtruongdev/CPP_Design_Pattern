/**
 * Generated by: Raymond Truong
 * Date: 2025/08/08
 */

#pragma once
#include <iostream>
#include <utility>
#include <vector>
#include <string>

namespace observer_design {
    using namespace  std;

    // Observer interface
    class JobObserver {
    public:
        virtual void onJobPosted(const string& job) = 0;
        virtual ~JobObserver() = default;
    };

    // Subject (Observable)
    class EmploymentAgency {
    private:
        vector<JobObserver*> observers;
        void notify(const string& job) const {
            for (const auto& observer : observers) {
                if (observer) {
                    observer->onJobPosted(job);
                }
            }
        }

    public:
        void attach(JobObserver* observer) {
            observers.push_back(observer);
        }
        void detach(JobObserver* observer) {
            erase(observers, observer);
        }
        void addJob(const string& job) const {
            cout << "\nðŸ”„EmploymentAgency: New job posted: " << job << "\n";
            notify(job);
        }
    };

    // Concrete Observer
    class JobSeeker final : public JobObserver {
    private:
        string name;
    public:
        explicit JobSeeker(string  name) : name(std::move(name)) {}
        void onJobPosted(const string& job) override {
            cout << " âœ…"<< name << " received job notification: " << job << "\n";
        }
    };
    
} // namespace myapp
