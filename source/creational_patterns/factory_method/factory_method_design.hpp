/**
 * Generated by: Raymond Truong
 * Date: 2025/08/06
 */

#pragma once

#include <iostream>
#include <memory>

using namespace std;

namespace myapp {

    // Interface: Flyable
    class Flyable {
    public:
        virtual void fly() = 0;
        virtual ~Flyable() = default;
    };

    // Abstract Product: Animal
    class Animal {
    public:
        virtual void make_sound() = 0;
        virtual void move() = 0;
        [[nodiscard]] virtual int leg_count() const = 0;
        virtual ~Animal() = default;
    };

    // Concrete Animal: Dog
    class Dog final : public Animal {
    public:
        void make_sound() override {
            cout << "Dog: Woof!" << endl;
        }

        void move() override {
            cout << "Dog runs on 4 legs." << endl;
        }

        [[nodiscard]] int leg_count() const override {
            return 4;
        }
    };

    // Concrete Animal: Dog
    class Bird final : public Animal, public Flyable {
    public:
        void make_sound() override {
            cout << "Bird: Chirp!" << endl;
        }

        void move() override {
            cout << "Bird hops on 2 legs." << endl;
        }

        [[nodiscard]] int leg_count() const override {
            return 2;
        }
        void fly() override {
            cout << "Bird is flying!" << endl;
        }
    };

    // Concrete Animal: Chicken
    class Chicken final : public Animal {
    public:
        void make_sound() override {
            cout << "Chicken: Cluck!" << endl;
        }

        void move() override {
            cout << "Chicken walks on 2 legs." << endl;
        }

        [[nodiscard]] int leg_count() const override {
            return 2;
        }
    };

    // ------------------ Factory --------------------
    class AnimalFactory {
    public:
        virtual unique_ptr<Animal> create_animal()=0;
        virtual ~AnimalFactory() = default;
    };

    class DogFactory final : public AnimalFactory {
    public:
        unique_ptr<Animal> create_animal() override {
            return make_unique<Dog>();
        }
    };

    class BirdFactory final: public AnimalFactory {
    public:
        unique_ptr<Animal> create_animal() override {
            return make_unique<Bird>();
        }
    };

    class ChickenFactory final: public AnimalFactory {
    public:
        unique_ptr<Animal> create_animal() override {
            return make_unique<Chicken>();
        }
    };


} // namespace myapp
