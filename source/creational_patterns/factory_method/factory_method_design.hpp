/**
 * Generated by: Raymond Truong
 * Date: 2025/08/06
 */

#pragma once

#include <iostream>
#include <memory>

using namespace std;

namespace myapp {

    // Interface: Car
    class Car {
    public:
        virtual void make_car() = 0;
        virtual ~Car() = default;
    };

    // Concrete Car: SportsCar
    class SportsCar final : public Car {
    public:
        void make_car() override {
            std::cout << "Sports car is made." << std::endl;
        }
    };

    // Concrete Car: EconomyCar
    class EconomyCar final : public Car {
    public:
        void make_car() override {
            std::cout << "Economy car is made." << std::endl;
        }
    };

    // Creator: CarStore (Factory Method pattern base class)
    class CarStore {
    public:
        void order_car() {
            auto car = create_car();      // Factory Method
            car->make_car();              // Use the product
        }

        virtual std::unique_ptr<Car> create_car() = 0;  // Factory Method
        virtual ~CarStore() = default;
    };

    // Concrete Creator: SportsCarStore
    class SportsCarStore final : public CarStore {
    public:
        std::unique_ptr<Car> create_car() override {
            return std::make_unique<SportsCar>();
        }
    };

    // Concrete Creator: EconomyCarStore
    class EconomyCarStore final : public CarStore {
    public:
        std::unique_ptr<Car> create_car() override {
            return std::make_unique<EconomyCar>();
        }
    };


} // namespace myapp
