/**
* Generated by: Raymond Truong
 * Date: 2025/08/06
 */
#pragma once

#include <memory>
#include "logger.hpp"
#include "factory_method_design.hpp"

namespace myapp {
    using namespace  std;

    inline void show_animal(const unique_ptr<Animal>& animal) {
        animal->make_sound();
        animal->move();
        cout << "Legs: " << animal->leg_count() << endl;
        // Try to cast to Flyable
        if (Flyable* flyer = dynamic_cast<Flyable*>(animal.get())) {
            flyer->fly();
        } else {
            cout << "This animal cannot fly." << endl;
        }
        cout << "------------------------" << endl;
    }
    inline void demo_factory_method() {
        LOG_INFO("============ Demo Factory Method Design Pattern ===========");

        unique_ptr<AnimalFactory> factory = nullptr;

        factory = make_unique<DogFactory>();
        const auto dog = factory->create_animal();
        show_animal(dog);

        factory = make_unique<BirdFactory>();
        const auto bird = factory->create_animal();
        show_animal(bird);

        factory = make_unique<ChickenFactory>();
        const auto chicken = factory->create_animal();
        show_animal(chicken);
    }
}