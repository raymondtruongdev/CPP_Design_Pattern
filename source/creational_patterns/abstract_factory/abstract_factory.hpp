/**
 * Generated by: Raymond Truong
 * Date: 2025/08/07
 */

#pragma once
#include <iostream>

namespace myapp {
    // Interface: Chair
    class Chair {
    public:
        virtual void make_chair() = 0;
        virtual ~Chair() = default;
    };

    // Interface: Shipment
    class Shipment {
    public:
        virtual void ship() = 0;
        virtual ~Shipment() = default;
    };

    // Interface: ChairFactory (Abstract Factory)
    class ChairFactory {
    public:
        virtual std::unique_ptr<Chair> create_chair() = 0;
        virtual std::unique_ptr<Shipment> create_shipment() = 0;
        virtual ~ChairFactory() = default;
    };

    // Concrete Chair: HighEndChair
    class HighEndChair final : public Chair {
    public:
        void make_chair() override {
            std::cout << "High-end chair is made." << std::endl;
        }
    };

    // Concrete Chair: NormalChair
    class NormalChair final : public Chair {
    public:
        void make_chair() override {
            std::cout << "Normal chair is made." << std::endl;
        }
    };

    // Concrete Shipment: FastShipment
    class FastShipment final : public Shipment {
    public:
        void ship() override {
            std::cout << "Product is shipped in 1 day." << std::endl;
        }
    };

    // Concrete Shipment: NormalShipment
    class NormalShipment final : public Shipment {
    public:
        void ship() override {
            std::cout << "Product is shipped in 3 days." << std::endl;
        }
    };

    // Concrete Factory: HighEndChairFactory
    class HighEndChairFactory final : public ChairFactory {
    public:
        std::unique_ptr<Chair> create_chair() override {
            return std::make_unique<HighEndChair>();
        }

        std::unique_ptr<Shipment> create_shipment() override {
            return std::make_unique<FastShipment>();
        }
    };

    // Concrete Factory: NormalChairFactory
    class NormalChairFactory final : public ChairFactory {
    public:
        std::unique_ptr<Chair> create_chair() override {
            return std::make_unique<NormalChair>();
        }

        std::unique_ptr<Shipment> create_shipment() override {
            return std::make_unique<NormalShipment>();
        }
    };
} // namespace myapp
