/**
 * Generated by: Raymond Truong
 * Date: 2025/07/22
 */

#include "singleton.hpp"
#include <iostream>
#include <utility>

#include "logger.hpp"

namespace myapp {
    Singleton::Singleton(string value): value_(std::move(value)) {
    }
    Singleton::~Singleton() {
        LOG_INFO("MySingleton  in Destructor");
    }

    Singleton *Singleton::getInstance(const string& value) {
        // In a singleton, you want to ensure only one instance is ever created,
        // even if multiple threads call getInstance() at the same time.
        // This block must be protected â€” otherwise, two threads could both see instance == nullptr and create two instances.
        std::lock_guard lock(mutex); // Lock is acquired here

        if (instance==nullptr) {
            instance = unique_ptr<Singleton>(new Singleton(value));
        }
        return instance.get();
    }

    void Singleton::print_demo() {
        LOG_INFO("MySingleton  is working!");
    }

}
