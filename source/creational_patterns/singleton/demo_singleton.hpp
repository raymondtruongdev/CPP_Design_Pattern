/**
 * Generated by: Raymond Truong
 * Date: 2025/07/22
 */

#pragma once


#include <iostream>
#include <thread>

#include "Singleton.hpp"

using namespace myapp;

inline void ThreadFoo() {
    // Following code emulates slow initialization.
    std::this_thread::sleep_for(std::chrono::milliseconds(1000));
    Singleton *singleton = Singleton::getInstance("FOO");
    std::cout << singleton->value() << "\n";
}

inline void ThreadBar() {
    // Following code emulates slow initialization.
    std::this_thread::sleep_for(std::chrono::milliseconds(1000));
    Singleton *singleton = Singleton::getInstance("BAR");
    std::cout << singleton->value() << "\n";
}

inline void demo_singleton() {
    std::cout << "============ Demo Creational design > Singleton ===========\n";
    std::cout << "If you see the same value, then singleton was reused (✅)\n" <<
            "If you see different values, then 2 singletons were created (❌)\n\n" <<
            "RESULT:\n";
    std::thread t1(ThreadFoo);
    std::thread t2(ThreadBar);
    t1.join();
    t2.join();
}
