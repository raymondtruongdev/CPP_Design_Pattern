/**
 * Generated by: Raymond Truong
 * Date: 2025/08/08
 */

#pragma once
#include <iostream>

using namespace std;

namespace prototype_design {

    // Interface: Shape
    class Shape {
    public:
        virtual unique_ptr<Shape> clone() = 0; // Clone method for creating copies.
        virtual void draw() = 0;     // Draw method for rendering the shape.
        virtual ~Shape() = default;  // Virtual destructor for proper cleanup.
    };

    // Concrete Shape: Circle
    class Circle final: public Shape {
    private:
        double radius = 0;
    public:
        explicit Circle(const double r) : radius(r) {}
        unique_ptr<Shape> clone() override {
            return make_unique<Circle>(*this);
        }
        void draw() override {
            std::cout << " * Drawing a circle with radius " << radius << std::endl;
        }
    };

    // Concrete Shape: Rectangle
    class Rectangle final: public Shape {
    private:
        double width = 0;
        double height = 0;
    public:
        explicit Rectangle(const double w, const double h) : width(w), height(h) {}
        unique_ptr<Shape> clone() override {
            return make_unique<Rectangle>(*this);
        }
        void draw() override {
            std::cout << " * Drawing a rectangle with width " << width << " and height " << height << std::endl;
        }
    };
    
} // namespace myapp
