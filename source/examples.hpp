/**
 * Generated by: Raymond Truong
 * Date: 2025/07/22
 */

#pragma once
#include <iostream>

#include "creational_patterns/builder/demo_builder.hpp"
#include "creational_patterns/factory_method/demo_factory_method.hpp"
#include "creational_patterns/singleton/demo_singleton.hpp"

using namespace std;
namespace myapp {
    typedef enum {
        singleton,
        builder,
        factory_method,
    } demo_type;

    class DemoExample {
    public:
        static void create_demo(demo_type type) {
            switch (type) {
                case singleton:
                    return demo_singleton();
                case builder:
                    return demo_builder();
                case factory_method:
                    return demo_factory_method();


                default: cout << "No example!" << endl;
            }
        }

    };
} // namespace myapp
